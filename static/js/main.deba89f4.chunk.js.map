{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","width","height","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.deba89f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//props = {id,name,email} function (props) == function ({id,name,email})\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} width=\"200px\" height=\"200px\"></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // if(true; ideally some condition...) {\r\n    //     throw new Error(\"Oops!\");\r\n    // }\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, index) => {\r\n                    return (\r\n                        <Card\r\n                            key={user.id}\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            email={user.email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange= {searchChange} \r\n                // never forget {} when writing javascript\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//props.children - children of the tag Scroll\r\n//used to create components that wrap components\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div \r\n        style = {{ overflowY: 'scroll',\r\n                 border:'0px',\r\n                 height:'700px'\r\n                }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n\r\n//CSS: overflow-y JSX: overflowY\r\n//style {...bracket for JS{...object with css properties...}...}","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (<h1>Oops! Something went wrong.</h1>) ;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport '../containers/App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n//props - never change; we take input and don't change it; \r\n//state - dynamic; object that describes your app\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { \r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)), \r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() { \r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter((user) => {\r\n            return user.name.toLowerCase().includes(searchField.toLowerCase());                \r\n        });\r\n        \r\n          if (isPending) {\r\n                return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }        \r\n} \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //double function - higher order component","import { CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n       } from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n}) //returns the object\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n    }","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\n//generally all AJAX async functions have pending success and failed\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n\r\n//variable and string must be the same (user preference not redux syntax)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n//Single source of truth\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n//State is read-only\r\n//Changes using pure functions\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n            //OR\r\n            //return {...state,searchField: action.payload};\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\n//When you have many reducers\n//const store = createStore(rootReducer);\n//For now\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n//Curly braces used for javascript, never forget\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n                    \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}